import { authHeader } from '../_helpers';
import ActiveDirectory from 'activedirectory';

export const userService = {
    login,
    logout,
    getAll
};

function login(usuario, contrasena) {
    this.state = {
        authResponse: undefined
    };

    var config = {
        url: 'ldap://192.168.100.71',
        baseDN: 'dc=TESTDOMAIN',
        username: 'user',
        password: 'pass'
    };

    var ad = new ActiveDirectory(config);
    this.config.username = usuario;
    this.config.password = contrasena;
    var user;

    return(
        ad.authenticate(usuario, contrasena, function (err, auth) {
            if (err) {
              this.setState({ authResponse: { error: JSON.stringify(err) } });
              return;
            }
      
            if (auth) {
                this.setState({ authResponse: auth });
                user.authdata = window.btoa(usuario + ':' + contrasena);
                localStorage.setItem('user', JSON.stringify(user));
            } else {
              console.log('Authentication failed!');
              this.setState({ authResponse: { authFailed: true } });
            }
          })
    );
     /*fetch(`http://localhost:4000/users/authenticate`, requestOptions)
        .then(handleResponse)
        .then(user => {
            // login successful if there's a user in the response
            if (user) {
                // store user details and basic auth credentials in local storage 
                // to keep user logged in between page refreshes
                user.authdata = window.btoa(username + ':' + password);
                localStorage.setItem('user', JSON.stringify(user));
            }

            return user;
        });*/
}

function logout() {
    // remove user from local storage to log user out
    localStorage.removeItem('user');
}

function getAll() {
    const requestOptions = {
        method: 'GET',
        headers: authHeader()
    };

    return fetch(`http://localhost:4000/users`, requestOptions).then(handleResponse);
}

function handleResponse(response) {
    return response.text().then(text => {
        const data = text && JSON.parse(text);
        if (!response.ok) {
            if (response.status === 401) {
                // auto logout if 401 response returned from api
                logout();
                window.location.reload(true);
            }

            const error = (data && data.message) || response.statusText;
            return Promise.reject(error);
        }

        return data;
    });
}